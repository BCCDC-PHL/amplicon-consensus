manifest {
    author = 'Dan Fornika <dan.fornika@bccdc.ca>'
    name = 'BCCDC-PHL/amplicon-consensus'
    description = 'Amplicon-based consensus sequence pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '0.1.0'
}

params {
    profile = false
    cache = ''
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    nanopore_suffixes = ['*_RL']
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath( params.fastq_input, illumina_suffixes, fastq_exts )
    fastq_input = 'NO_FILE'
    samplesheet_input = 'NO_FILE'
    ref = 'NO_FILE'
    bed = 'NO_FILE'
    unambiguous_allele_freq_threshold = 0.75
    ambiguous_allele_freq_threshold = 0.25
    min_depth = 10
    max_depth = 0
    outdir = 'results'
    collect_outputs = false
    collected_outputs_prefix = 'collected'
    pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
    pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def makeFastqSearchPath ( base_path, fastq_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in fastq_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(base_path.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
    conda {
	conda.enabled = true
	process.conda = "$baseDir/environments/environment.yml"
	if (params.cache){
	    conda.cacheDir = params.cache
	}
    }
}

process {
    withName: bwa_mem {
	cpus = 24
    }
}
